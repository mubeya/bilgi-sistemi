<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>
     Amaç
   Bölümümüzün amacı, günümüz rekabet ortamının gereği olan tüm meslek ve iletişim becerilerine sahip, hızla gelişip değişen teknolojileri takip edip uygulayabilen, bilgili, yetkin, çalışkan, üretken, düşünen ve araştıran, bilimsel ve sosyal etik değerlere sahip Bilgisayar Mühendisleri yetiştirmektir. 

     Misyon
    Bilgisayar mühendisliğinin misyonu eğitimde mükemmelliğe ulaşarak, bilimsel araştırmalar ile bilgisayar bilimleri ve mühendislik alanında toplumun yararına olacak yeni bilgi ve teknolojileri üretmektir. Misyonumuz öğrencilerimizin bilgisayar bilimleri ve mühendisliğinde güncel ve temel konularda derin bilgi birikimi elde ederek, akademi ya da iş dünyasında verimli bireyler olabilmeleri için gerekli olan kaliteye ulaşmalarına destek olmaktır.Eğitim kadromuz içinse kendini isine adamış bilim adamı, özverili eğitimci ve yenilikçi araştırmacı olarak bireysel gelişmelerine destek sağlamaktır


    Vizyon
   Vizyonumuz, bölümümüzü mühendislik ve bilgisayar bilimlerinde yüksek kalitedeki eğitim ve araştırma sayesinde bölgesel lider konumuna getirmek. Bu alanlardaki başarılar ise hedeflenen araştırmalar ve yüksek kalitedeki eğitim kadromuz ile bilgisayar bilimleri, donanım ve yazılım alanlarında modern eğitim ile sağlanır. Bununla birlikte, bölümümüz öğretim elemanlarının bireysel araştırma girişimlerini destekleme yanında endüstri ve devlet tarafından öngörülen etkin alanlarda disiplinler arası araştırma çalışmalarına yönlenmelerini de özendirmek.Ayrıca, Mezunlarımızın bilgi, beceri ve tecrübelerinden faydalanmak ve onlara yaşam boyu öğrenme fırsatları sağlamak için verimli bağlar oluşturmak. 



    Kabul Koşulları
   Kocaeli Üniversitesi Mühendislik Fakültesi Bilgisayar Mühendisliği Bölümü'ne kayıt yaptırmak için ÖSYM tarafından düzenlenen sınavları başarmış olmak gerekir. Yurt içi veya dışında eşdeğer bir programda öğrenim gören bir öğrenci, üniversite tarafından kontenjan açıldığı takdirde yatay geçiş için başvuru yapabilir. Öğrenci kabulü, başvuruda bulunan öğrencilerin başarı durumlarının değerlendirilmesi sonucu gerçekleşir. Detaylı bilgi için lütfen Kocaeli Üniversitesi Önlisans ve Lisans Eğitim-Öğretim ve Sınav Yönetmeliği ilgili maddelerine bakınız. Üniversite tarafından onaylanmış ve bir anlaşma ile sınırları belirlenmiş öğrenci değişim programları kapsamında yurt dışından gelen öğrenciler bölümde İngilizce olarak verilen derslere kayıt yaptırabilirler. Öğrenci Türkçe dil bilgisi yeterliğine sahipse Türkçe derslere de kayıt yaptırabilir. 
 
    Mezuniyet Koşulları
   Öğrencinin bu programda lisans derecesini alabilmesi için: 

   (a) Toplam 240 AKTS iş yükünü sağlaması,
   (b) IV. yarıyıldan sonra 25, VI. Yarıyıldan sonra 25 olmak üzere 50 iş günü Bilgisayar Mühendisliği Bölümü staj esaslarına göre staj yapması, 
   (c) Programdaki tüm dersleri başarmış olması, 
   (d) Genel not ortalamasının en az 2,00 olması, 
   (e) VIII. yarıyıl veya sonrasında öğrencinin verilen bir konu üzerinde Bitirme Çalışması’nı başarı ile tamamlaması gerekmektedir. 

    Alınacak Derece
   Programı başarı ile tamamlayan öğrenciye Bilgisayar Mühendisliği lisans diploması verilir. Bölüm mezunu bilgisayar mühendisliğinin yanısıra bu programdan öğrenci kabul eden diğer bilim dallarında da yüksek lisans ve doktora programlarına başvuruda bulunabilir. </value>
  </data>
</root>